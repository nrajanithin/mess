{"version":3,"sources":["logo.svg","config/fire.js","components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","props","authListner","auth","onAuthStateChanged","user","console","log","email","setState","componentDidMount","database","ref","child","on","snapshot","val","chat","state","forceUpdate","handleLogin","e","preventDefault","username","password","signInWithEmailAndPassword","then","u","catch","err","addmsg","obj","push","handleKeyPress","event","key","ob","message","window","setInterval","elem","document","getElementById","scrollTop","scrollHeight","sendmsg","handleChange","target","name","value","logout","signOut","loginpage","this","style","width","marginLeft","marginTop","class","for","fontFamily","type","onChange","id","required","onClick","height","color","backgroundColor","display","overflow","scrollBehavior","Object","keys","map","position","float","padding","marginBottom","flexWrap","borderRadius","marginRight","onKeyPress","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.420a0cb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase'\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyCJZDLgFrz-QvEp4seljntGgUu525LHQaA\",\r\n  authDomain: \"chatt-bc4e9.firebaseapp.com\",\r\n  databaseURL: \"https://chatt-bc4e9.firebaseio.com\",\r\n  projectId: \"chatt-bc4e9\",\r\n  storageBucket: \"chatt-bc4e9.appspot.com\",\r\n  messagingSenderId: \"847495222066\",\r\n  appId: \"1:847495222066:web:297d007ba7e3ccb1793d2b\"\r\n};\r\n  // Initialize Firebase\r\nconst fire =  firebase.initializeApp(firebaseConfig);\r\nexport default fire;","import React from 'react'\r\nimport fire from '../../config/fire'\r\nclass Login extends React.Component\r\n{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n        username:'',\r\n        password:'',\r\n        user:null,\r\n        message:'',\r\n        chat:[],\r\n        loginpage:true\r\n        }\r\n       }\r\n       \r\n    authListner = ()=>{\r\n        fire.auth().onAuthStateChanged((user)=>{\r\n          if(user)\r\n          {\r\n            console.log(user.email);\r\n            this.setState({user:user});\r\n          }\r\n          else\r\n          {\r\n            this.setState({user:null});\r\n          }\r\n        })\r\n      }\r\n    componentDidMount = ()=>\r\n    {\r\n        this.authListner();\r\n        fire.database().ref().child('messages').on('value',snapshot =>\r\n        {\r\n            console.log('msg snapshot loki vacham');\r\n            if(snapshot.val()!=null)\r\n            {\r\n                this.setState({chat: {...snapshot.val()}});\r\n                console.log(this.state);\r\n                this.forceUpdate();\r\n            }\r\n        });\r\n        \r\n    }\r\n    handleLogin = (e)=>\r\n    {\r\n        e.preventDefault();\r\n        if(this.state.username!='' && this.state.password!='')\r\n        {\r\n            fire.auth().signInWithEmailAndPassword(this.state.username,this.state.password).then((u)=>{\r\n                console.log(u);\r\n            }).catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n    addmsg = (obj)=>\r\n    {\r\n        fire.database().ref().child('messages').push(\r\n            obj,\r\n            err=>\r\n            {\r\n                if(err)\r\n                {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        )\r\n    }\r\n    handleKeyPress = (event) => {\r\n        if(event.key === 'Enter'){\r\n          var ob = {username:this.state.user.email,message:this.state.message};\r\n          this.addmsg(ob);\r\n          this.setState({message:''});\r\n          window.setInterval(function() {\r\n            var elem = document.getElementById('chatt');\r\n            elem.scrollTop = elem.scrollHeight;\r\n          }, 1000);\r\n        }\r\n      }\r\n    sendmsg = (e)=>{\r\n        var ob = {username:this.state.user.email,message:this.state.message};\r\n          this.addmsg(ob);\r\n          this.setState({message:''});\r\n          window.setInterval(function() {\r\n            var elem = document.getElementById('chatt');\r\n            elem.scrollTop = elem.scrollHeight;\r\n          }, 1000);\r\n      }\r\n    handleChange = (e)=>\r\n    {\r\n       this.setState({[e.target.name]: e.target.value});\r\n       console.log(this.state);\r\n    }\r\n    logout = ()=>\r\n    {\r\n        fire.auth().signOut();\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n\r\n            this.state.user==null?\r\n            <div>\r\n                <form style={{width:'60%',marginLeft:'20%',marginTop:'2%'}}>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"email\" style={{fontFamily:'Cursive'}}>Email address:</label>\r\n                        <input type=\"email\" name=\"username\" onChange={this.handleChange} class=\"form-control\" id=\"email\" required/>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"pwd\" style={{fontFamily:'Cursive'}}>Password:</label>\r\n                        <input type=\"password\" name=\"password\" onChange={this.handleChange}  class=\"form-control\" id=\"pwd\" required/>\r\n                    </div>\r\n                    <div>\r\n                      <button style={{marginLeft:'10px'}} type=\"submit\" class=\"btn btn-primary\" onClick={this.handleLogin}>Signup</button>\r\n                    </div>\r\n                    \r\n                 </form>\r\n            </div> :\r\n            <div style={{width:'100%',height:'100vh',color:'black'}}>\r\n                <div>\r\n                   <header style={{color:'white',backgroundColor:'green',width:'100%',height:'60px',display:'flex'}}><h1>NITHIN CHAT</h1><button style={{marginLeft:'auto'}} onClick={this.logout} class=\"btn btn-danger\">Logout</button></header>\r\n                </div>\r\n        \r\n                <div id=\"chatt\" style={{marginLeft:'50px',height:'80%',overflow:'scroll',scrollBehavior:'smooth'}}>\r\n               \r\n               {\r\n                   \r\n                   Object.keys(this.state.chat).map(id=>{\r\n                       if(this.state.chat[id].username == this.state.user.email)\r\n                       {\r\n                        return <div key={id} style={{display:'block',marginLeft:'30%',position:'relative',float:'right',padding:'20px',marginBottom:'5px',backgroundColor:'blue',flexWrap:'wrap',width:'50%',borderRadius:'100px'}}>\r\n                        <small style={{color:'white'}}>{this.state.chat[id].username}</small>\r\n                        <h5 style={{color:'white'}}>{this.state.chat[id].message}</h5>\r\n                           </div>\r\n                       }\r\n                       else{\r\n                        return <div key={id} style={{display:'block',marginRight:'30%',position:'relative',float:'left',padding:'20px',marginBottom:'5px',backgroundColor:'black',flexWrap:'wrap',width:'50%',borderRadius:'100px'}}>\r\n                        <small style={{color:'white'}}>{this.state.chat[id].username}</small>\r\n                        <h5 style={{color:'white'}}>{this.state.chat[id].message}</h5>\r\n                         </div>\r\n                       }\r\n                       \r\n                            \r\n                   })\r\n               }\r\n           \r\n               </div>\r\n               \r\n              \r\n                <footer style={{marginLeft:'50px'}}>\r\n                  <input style={{width:'80%',float:'left'}} value={this.state.message} onKeyPress={this.handleKeyPress} type=\"text\" name=\"message\" onChange={this.handleChange} class=\"form-control\" required/>\r\n                  <button class=\"btn btn-primary\" onClick={this.sendmsg}>Send</button>\r\n                </footer>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nexport default Login;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './components/Login/Login'\nclass App extends React.Component {\n  render()\n  {\n    return(\n      <div>\n          <Login/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}